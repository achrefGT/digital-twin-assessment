version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - digital-twin-network
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - POSTGRES_DB=${DATABASE_NAME:-digital_twin}
      - POSTGRES_MULTIPLE_EXTENSIONS=uuid-ossp
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-digital_twin}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      # For container-to-container communication, use service names
      - VITE_API_BASE_URL=http://api-gateway:8000
      - VITE_RESILIENCE_SERVICE_URL=http://resilience-service:8001
      - VITE_HUMAN_CENTRICITY_SERVICE_URL=http://human-centricity-service:8002
      - VITE_SLCA_SERVICE_URL=http://slca-service:8003
      - VITE_LCC_SERVICE_URL=http://lcc-service:8004
      - VITE_ELCA_SERVICE_URL=http://elca-service:8005
    depends_on:
      - api-gateway
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Application Services
  api-gateway:
    build:
      context: .
      dockerfile: backend/api_gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "${API_PORT:-8000}:8000"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8000
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs

  resilience-service:
    build:
      context: .
      dockerfile: backend/services/resilience/Dockerfile
    container_name: resilience-service
    ports:
      - "${RESILIENCE_SERVICE_PORT:-8001}:8001"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8001
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - RESILIENCE_API_HOST=0.0.0.0
      - RESILIENCE_API_PORT=8001
      - RESILIENCE_LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs

  human-centricity-service:
    build:
      context: .
      dockerfile: backend/services/human_centricity/Dockerfile
    container_name: human-centricity-service
    ports:
      - "${HUMAN_CENTRICITY_SERVICE_PORT:-8002}:8002"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8002
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - HUMAN_CENTRICITY_API_HOST=0.0.0.0
      - HUMAN_CENTRICITY_API_PORT=8002
      - HUMAN_CENTRICITY_LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs

  slca-service:
    build:
      context: .
      dockerfile: backend/services/slca/Dockerfile
    container_name: slca-service
    ports:
      - "${SLCA_SERVICE_PORT:-8003}:8003"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8003
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SLCA_API_HOST=0.0.0.0
      - SLCA_API_PORT=8003
      - SLCA_LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs

  lcc-service:
    build:
      context: .
      dockerfile: backend/services/lcc/Dockerfile
    container_name: lcc-service
    ports:
      - "${LCC_SERVICE_PORT:-8004}:8004"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8004
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LCC_API_HOST=0.0.0.0
      - LCC_API_PORT=8004
      - LCC_LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs

  elca-service:
    build:
      context: .
      dockerfile: backend/services/elca/Dockerfile
    container_name: elca-service
    ports:
      - "${ELCA:-8005}:8005"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8005
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ELCA_API_HOST=0.0.0.0
      - ELCA_API_PORT=8005
      - ELCA_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - BRIGHTWAY2_DIR=/tmp/brightway2_data  
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs
      - elca_brightway2_data:/tmp/brightway2_data  

  # Optional: Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_PORT:-9100}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  postgres_data:
    driver: local
  elca_brightway2_data:
    driver: local

networks:
  digital-twin-network:
    driver: bridge
    name: digital-twin-network