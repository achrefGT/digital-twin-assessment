version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - digital-twin-network
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis (in-memory datastore / cache)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      sh -c "if [ -n \"$REDIS_PASSWORD\" ]; then redis-server --requirepass \"$REDIS_PASSWORD\"; else redis-server; fi"
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "if [ -n \"$REDIS_PASSWORD\" ]; then redis-cli -a \"$REDIS_PASSWORD\" ping; else redis-cli ping; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - POSTGRES_DB=${DATABASE_NAME:-digital_twin}
      - POSTGRES_MULTIPLE_EXTENSIONS=uuid-ossp
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-digital_twin}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend
    image: "${DOCKERHUB_PREFIX:-achrefgataa}/digital-twin-frontend:${IMAGE_TAG:-latest}"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    env_file:
      - ./frontend/.env
    environment:
      # For container-to-container communication, use service names
      - VITE_API_BASE_URL=http://api-gateway:8000
      - VITE_RESILIENCE_SERVICE_URL=http://resilience-service:8001
      - VITE_HUMAN_CENTRICITY_SERVICE_URL=http://human-centricity-service:8002
      - VITE_SLCA_SERVICE_URL=http://slca-service:8003
      - VITE_LCC_SERVICE_URL=http://lcc-service:8004
      - VITE_ELCA_SERVICE_URL=http://elca-service:8005
      - VITE_RECOMMENDATION_SERVICE_URL=http://recommendation-service:8007
    depends_on:
      - api-gateway
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Application Services
  api-gateway:
    build:
      context: .
      dockerfile: backend/api_gateway/Dockerfile
    container_name: api-gateway
    image: "${DOCKERHUB_PREFIX:-achrefgataa}/digital-twin-api-gateway:${IMAGE_TAG:-latest}"
    ports:
      - "${API_PORT:-8000}:8000"
    env_file:
      - ./backend/.env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PORT=8000
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:  
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # AI Recommendation Service
  recommendation-service:
    build:
      context: .
      dockerfile: backend/services/recommendation/Dockerfile
    container_name: recommendation-service
    image: "${DOCKERHUB_PREFIX:-achrefgataa}/digital-twin-recommendation:${IMAGE_TAG:-latest}"
    ports:
      - "${RECOMMENDATION_SERVICE_PORT:-8007}:8007"
    env_file:
      - ./backend/.env
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - NVIDIA_API_KEY=${NVIDIA_API_KEY}
      
      # Service Configuration
      - PORT=8007
      - RECOMMENDATION_API_HOST=0.0.0.0
      - RECOMMENDATION_API_PORT=8007
      - RECOMMENDATION_LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Database Connection
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      
      # Kafka
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      
      # Redis (for caching)
      - REDIS_URL=redis://redis:6379/1
      
      # AI Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - ENABLE_AI_RECOMMENDATIONS=true
      - ENABLE_GROQ=true
      - ENABLE_NVIDIA=true
      - ENABLE_GEMINI=${ENABLE_GEMINI:-false}
      - ENABLE_CACHING=${ENABLE_CACHING:-false}
      - ENABLE_CUSTOM_CRITERIA_TIPS=${ENABLE_CUSTOM_CRITERIA_TIPS:-false}
      - USE_RULE_BASED_FALLBACK=true
      - MERGE_AI_AND_RULES=true
      
      # AI Performance Settings
      - AI_MAX_RETRIES=3
      - AI_TIMEOUT_SECONDS=10
      - AI_RATE_LIMIT_DELAY=2.0
      - AI_TEMPERATURE=0.7
      - AI_MAX_TOKENS=1000
      
      # Logging
      - LOG_API_REQUESTS=true
      - LOG_API_RESPONSES=${LOG_API_RESPONSES:-false}
    
    volumes:
      # Persist AI-generated data and cache
      - recommendation_data:/app/data
      - recommendation_logs:/app/logs
    
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - digital-twin-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "python", "-c", "from ai_api_client import AIClient; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  resilience-service:
    build:
      context: .
      dockerfile: backend/services/resilience/Dockerfile
    container_name: resilience-service
    image: "${DOCKERHUB_PREFIX:-achrefgataa}/digital-twin-resilience:${IMAGE_TAG:-latest}"
    ports:
      - "${RESILIENCE_SERVICE_PORT:-8001}:8001"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8001
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - RESILIENCE_API_HOST=0.0.0.0
      - RESILIENCE_API_PORT=8001
      - RESILIENCE_LOG_LEVEL=${LOG_LEVEL:-INFO}

    depends_on:
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  sustainability-service:
    build:
      context: .
      dockerfile: backend/services/sustainability/Dockerfile
    container_name: sustainability-service
    image: "${DOCKERHUB_PREFIX:-achrefgataa}/digital-twin-sustainability:${IMAGE_TAG:-latest}"
    ports:
      - "${SUSTAINABILITY_SERVICE_PORT:-8006}:8006"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8006
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SUSTAINABILITY_API_HOST=0.0.0.0
      - SUSTAINABILITY_API_PORT=8006
      - SUSTAINABILITY_LOG_LEVEL=${LOG_LEVEL:-INFO}

    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  human-centricity-service:
    build:
      context: .
      dockerfile: backend/services/human_centricity/Dockerfile
    container_name: human-centricity-service
    image: "${DOCKERHUB_PREFIX:-achrefgataa}/digital-twin-human-centricity:${IMAGE_TAG:-latest}"
    ports:
      - "${HUMAN_CENTRICITY_SERVICE_PORT:-8002}:8002"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8002
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - HUMAN_CENTRICITY_API_HOST=0.0.0.0
      - HUMAN_CENTRICITY_API_PORT=8002
      - HUMAN_CENTRICITY_LOG_LEVEL=${LOG_LEVEL:-INFO}

    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "${KAFKA_UI_PORT:-9100}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - digital-twin-network
    restart: unless-stopped

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  recommendation_data:
    driver: local
  recommendation_logs:
    driver: local

networks:
  digital-twin-network:
    driver: bridge
    name: digital-twin-network